<div class="function-block-container">
    <div class="title-container"
            style="--title-name-background-color: @Node.NameBackgroundColor;
                --title-name-fore-color: @Node.NameForeColor;">
        @Node.Name
    </div>

    <div class="run-mode-container">
        <div class="run-mode-node-id">@Node.ClusterNodeId</div>
        <div class="run-mode @(Node.RunMode == "Y" ? "short" : "")">@Node.RunMode</div>
        @if (Node.RunMode == "Y")
        {
            <div class="run-mode-cycle-settings frequency">@Node.CycleFrequency</div>
            <div class="run-mode-cycle-settings offset">@Node.CycleOffset</div>
            <div class="run-mode-cycle-settings priority">@Node.CyclePriority</div>
        }
        else
        {
            <div class="run-mode-cycle-settings dummy"></div>
        }
        <div class="run-mode-dummy"></div>
    </div>

    <div class="function-block-image-container @(IsImageVisible() ? "" : "invisible")">
        <div class="function-block-image">
            @if (string.IsNullOrEmpty(Node.ImageSrc))
            {
                <span>@Node.ImageText</span>
            }
            else
            {
                <img src="@Node.ImageSrc" />
            }
        </div>
    </div>

    <CascadingValue IsFixed="true"
                    Value="_portCollection">

        @for (var i = 0; i < Node.Connectors.Count; i++)
        {
            var inputConnector = Node.Connectors[i][0];
            var outputConnector = Node.Connectors[i][1];
			
			<div class="connector-row @(i == 3 ? "divider" : "") @(i == Node.Connectors.Count - 1 ? "last-row" : "")">
				@if (inputConnector != null)
				{
					@InputConnectorFragment(inputConnector)
				}

				@if (outputConnector != null)
				{
					@OutputConnectorFragment(outputConnector)
				}
			</div>
		}
    </CascadingValue>

    @if (Node.Selected)
    {
        <div class="function-block-selection"></div>
    }
</div>


@code {
    private static RenderFragment<FunctionBlockNodeConnector> InputConnectorFragment = connector => __builder =>
    {
        <div class="input-connector-container"
             style="--input-text-background-color: @connector.TextBackgroundColor;">

            <div class="input-port-container"
                 style="--input-port-color: @connector.PortColor; --input-port-text-color: @connector.PortTextColor">

                <PortRenderer Port="@connector.Port">
                    @if (!string.IsNullOrWhiteSpace(connector.PortText))
                    {
                        <div>@connector.PortText</div>
                    }
                </PortRenderer>
            </div>
            <div class="input-pooling-mode"
                 style="--input-pooling-mode-color: @connector.PoolingModeColor;">

                @connector.PoolingMode
            </div>
            <div class="input-description"
                 style="--input-description-color: @connector.DescriptionColor;">

                @connector.Description
            </div>
        </div>
    };

    private static RenderFragment<FunctionBlockNodeConnector> OutputConnectorFragment = connector => __builder =>
    {
        <div class="output-connector-container"
             style="--output-text-background-color: @connector.TextBackgroundColor;">

            <div class="output-description"
                 style="--output-description-color: @connector.DescriptionColor;">

                @connector.Description
            </div>
            <div class="output-port-container"
                 style="--output-port-color: @connector.PortColor; --output-port-text-color: @connector.PortTextColor">

                <PortRenderer Port="@connector.Port">
                    @if (!string.IsNullOrWhiteSpace(connector.PortText))
                    {
                        <div>@connector.PortText</div>
                    }
                </PortRenderer>
            </div>
        </div>
    };
}
